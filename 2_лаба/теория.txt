
---- PyTorch: ----

Тензоры - как массивы numpy, но могут работать на GPU, имеют дополнительные функции
легко преобразуются в NumPy массивы
могут использоваться для хранения:
- входных данных (изображения, звука, текста)
- весов и параметров нейросети
- выходных параметров нейросети

torch.utils.data.Dataset
Датасеты - хранят данные и их лэйблы.

torch.utils.data.DataLoader
ДатаЛоадеры - обёртка на датасет. Упрощает доступ к данным и взаимодействие с ними

Трансформы - выполняют преобразования над датасетами.
ToTensor converts a PIL image or NumPy ndarray into a FloatTensor. Масштабирует интенсивность пикселей: [0., 1.]

Модель - нейросеть, которую мы обучаем.
Может работать на акселераторах, или на CPU. За это отвечает переменная device и метод .to(device)


torch.autograd
Автоград - Engine который позволяет применять метод обучения нейросетей - "back propagation", он же "обратное распространение ошибки"
Алгоритм:
- прямой проход: данные проходят через нейросеть, считается предсказание, вычисляется ошибка
- обратный проход: ошибка распространяется назад через сеть, вычисляются градиенты (производные) функции потерь по всем параметрам модели (весам и смещениям)
- обновление параметров: градиенты показывают направление, в котором нужно изменить параметры чтобы уменьшить ошибку



---- ImageNet ----
Данные для проверки и тестирования состоят из 150_000 изображений
1000 категорий объектов


---- CIFAR-100 ----
60_000 изображений
100 классов.
Каждый класс - 600 изображений. 500 обучение, 100 тест


---- ResNeXt ----

Главное отличие - новый параметр "cardinality" или кардинальность / мощность
Этот параметр контроллирует число параллельных путей или веток, внутри каждого блока
За счёт нескольких веток, ResNeXt способен выучить более разнообразные особенности изображений
Что делает его более эффективным в изучении сложных паттернов

RsNeXt соблюдает баланс между complexiy и accurace

Тезисы статьи:
-увеличение cardinality может быть эффективнее увеличения глубины нейросети
-split-transform-merge strategy


Risidual-блок:
- последовательность свёрток
- shortccut соединение
- В ResNext внутри каждого блока операции свертки разделяются
 на несколько независимых ветвей
- Результаты всех ветвей объединяются путем суммирования





- - - блок кода

- - - конец блока

